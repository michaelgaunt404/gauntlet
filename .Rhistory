franconia %>%
head(1) %>%
st_cast("MULTILINESTRING") %>%
self_buffer(rad_bg = 200,
rad_sm = 200
) %>%
map(mapview)
franconia %>%
head(1) %>%
st_cast("MULTILINESTRING") %>%
self_buffer(rad_bg = 1000,
rad_sm = 200
) %>%
map(mapview)
franconia %>%
head(1) %>%
st_cast("MULTILINESTRING") %>%
self_buffer(rad_bg = 10000,
rad_sm = 200
) %>%
map(mapview)
franconia %>%
head(1) %>%
st_cast("MULTILINESTRING") %>%
self_buffer(rad_bg = 10000,
rad_sm = 5000
) %>%
map(mapview)
franconia %>%
head(1) %>%
st_cast("MULTILINESTRING") %>%
self_buffer(rad_bg = 10000,
rad_sm = 500
) %>%
map(mapview)
franconia %>%
head(1) %>%
st_cast("MULTILINESTRING") %>%
self_buffer(rad_bg = 10000,
rad_sm = 1000
) %>%
map(mapview)
document()
document()
install()
library(gauntlet)
gauntlet
gauntlet::link_locator
devtools::install()
devtools::document()
devtools::build()
devtools::install()
library(gauntlet)
###lag functions----
make_lag_col = function(lags = c(1, 7)){
purrr::map(lags, ~purrr::partial(dplyr::lag, n = .x))
}
auto_make_lag_col = function(col, lags = c(1, 7)){
dplyr::across({{col}}, make_lag_col(lags = lags), .names = "{.col}_lag_{lags}")
}
###difference functions----
make_diff = function(col, lags){
{{col}}-dplyr::lag({{col}}, n = lags)
}
make_diff_col = function(lags = c(1, 7)){
purrr::map(lags, ~purrr::partial(make_diff, lags = .x))
}
auto_make_diff_col = function(col, lags = c(1, 7)){
dplyr::across({{col}}, make_diff_col(lags = lags), .names = "{.col}_diff_{lags}")
}
make_diffp = function(col, lags){
({{col}}-dplyr::lag({{col}}, n = lags))/dplyr::lag({{col}}, n = lags)
}
make_diffp_col = function(lags = c(1, 7)){
purrr::map(lags, ~purrr::partial(make_diffp, lags = .x))
}
auto_make_diffp_col = function(col, lags = c(1, 7)){
dplyr::across({{col}}, make_diffp_col(lags = lags), .names = "{.col}_diffp_{lags}")
}
###mean functions----
make_rMean_col = function(width, equal){
#works
#can only perform equal weight for now
purrr::map(width,
~purrr::partial(
roll::roll_mean,
width = .x,
weights =
# ifelse(equal == T,
rep(1, .x)
# ((c(1:.x)**equal)/(.x**equal/.9))
# )
)
)
}
auto_make_rMean_col = function(col, width = c(7)){
dplyr::across({{col}}, make_rMean_col(width = width, equal = 2), .names = "{.col}_rMean_{width}")
}
library(tidyverse)
library(data.table)
library(sf)
library(here)
library(leaflet)
library(leafpop)
library(crosstalk)
library(timetk)
library(modeltime)
library(tidymodels)
bike_transactions_tbl <- ucidata::bike_sharing_daily %>%
select(dteday, cnt) %>%
set_names(c("date", "value"))
bike_transactions_tbl
bike_transactions_tbl %>%
mutate(auto_make_lag_col(value, lags = c(1, 3, 5, 7, 14, 21)))
bike_transactions_tbl
make_lag_col = function(lags = c(1, 7)){
purrr::map(lags, ~purrr::partial(dplyr::lag, n = .x))
}
auto_make_lag_col = function(col, lags = c(1, 7)){
dplyr::across({{col}}, make_lag_col(lags = lags), .names = "{.col}_lag_{lags}")
}
c(1, 7) %>%  str()
data.frame(value1 = rnorm(10))
data.frame(value1 = rnorm(10),
value1 = rnorm(10))
data.frame(index = 1:10,
value1 = rnorm(10),
value1 = rnorm(10))
#' @param col
#' @param lags
#'
#' @return
#' @export
#'
#' @examples
#'
#' data.frame(value1 = rnorm(10))
#'
auto_make_lag_col = function(col, lags = c(1, 7)){
dplyr::across({{col}}, make_lag_col(lags = lags), .names = "{.col}_lag_{lags}")
}
data.frame(index = 1:10,
value1 = rnorm(10),
value1 = rnorm(10)) %>%
mutate(auto_make_lag_col(value1, c(1, 3, 5)))
data.frame(index = 1:10,
value1 = rnorm(10),
value2 = rnorm(10)) %>%
mutate(auto_make_lag_col(c(value1, value2), c(1, 3, 5)))
data.frame(index = 1:10,
value1 = rnorm(10),
value2 = rnorm(10)) %>%
mutate(auto_make_lag_col(col = c(value1, value2), c(1, 3, 5)))
data.frame(index = 1:10,
value1 = rnorm(10),
value2 = rnorm(10)) %>%
mutate(auto_make_lag_col(col = value1, c(1, 3, 5)))
data.frame(index = 1:10,
value1 = rnorm(10),
value2 = rnorm(10)) %>%
mutate(across(c(value1, value2), ~auto_make_lag_col(col = .x, c(1, 3, 5))))
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(make_diff(col = value1, c(1, 3, 5)))
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(make_diff(col = value1, c(1, 3, 5)))
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(he = make_diff(col = value1, c(1)))
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(he = make_diff(col = value1, c(1, 5)))
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(value1_differenced = make_diff(col = value1, c(1)))
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
#' data.frame(index = 1:10,
#'           value1 = rnorm(10), value2 = rnorm(10)) %>%
#'  mutate(value1_differenced = make_diff(col = value1, c(1)))
make_diff = function(col, lags, percent = F){
if (percent) {
({{col}}-dplyr::lag({{col}}, n = lags))/dplyr::lag({{col}}, n = lags)
} else {
{{col}}-dplyr::lag({{col}}, n = lags)
}
}
#' Makes difference column from a dataframe column defined by the user using lags as defined by the user. Should not be used directly by user - it is better to use via auto_make_diff_col() function.
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(value1_differenced = make_diff(col = value1, c(1))) %>%
mutate(value1_differenced = make_diff(col = value1, c(1)), percent = T)
make_diff = function(col, lags, percent = F){
if (percent) {
({{col}}-dplyr::lag({{col}}, n = lags))/dplyr::lag({{col}}, n = lags)
} else {
{{col}}-dplyr::lag({{col}}, n = lags)
}
}
#' Makes difference column from a dataframe column defined by the user using lags as defined by the user. Should not be used directly by user - it is better to use via auto_make_diff_col() function.
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(value1_differenced = make_diff(col = value1, c(1))) %>%
mutate(value1_differenced_percent = make_diff(col = value1, c(1)), percent = T)
#' Makes difference column from a dataframe column defined by the user using lags as defined by the user. Should not be used directly by user - it is better to use via auto_make_diff_col() function.
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(value1_differenced = make_diff(col = value1, c(1), percent = F)) %>%
mutate(value1_differenced_percent = make_diff(col = value1, c(1)), percent = T)
#' Makes difference column from a dataframe column defined by the user using lags as defined by the user. Should not be used directly by user - it is better to use via auto_make_diff_col() function.
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(value1_differenced = make_diff(col = index, c(1), percent = F)) %>%
mutate(value1_differenced_percent = make_diff(col = index, c(1)), percent = T)
#' Makes difference column from a dataframe column defined by the user using lags as defined by the user. Should not be used directly by user - it is better to use via auto_make_diff_col() function.
#'
#' @param col a column to make lags
#' @param lags numeric list
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(value1_differenced = make_diff(col = index, c(1), percent = F)) %>%
mutate(value1_differenced_percent = make_diff(col = index, c(1), percent = T))
#'
#' @return
#' @export
#'
#' @examples
#'
#' data.frame(index = 1:10,
#'           value1 = rnorm(10), value2 = rnorm(10)) %>%
#'  mutate(value1_differenced = make_diff(col = index, c(1), percent = F)) %>%
#'  mutate(value1_differenced_percent = make_diff(col = index, c(1), percent = T))
make_diff = function(col, lags, percent = F){
if (percent) {
({{col}}-dplyr::lag({{col}}, n = lags))/dplyr::lag({{col}}, n = lags)
} else {
{{col}}-dplyr::lag({{col}}, n = lags)
}
}
#'
#' @return
#' @export
#'
#' @examples
#'
#' data.frame(index = 1:10,
#'           value1 = rnorm(10), value2 = rnorm(10)) %>%
#'  mutate(value1_differenced = make_diff(col = index, c(1), percent = F)) %>%
#'  mutate(value1_differenced_percent = make_diff(col = index, c(1), percent = T))
make_diff = function(col, lags, percent = F){
if (percent) {
({{col}}-dplyr::lag({{col}}, n = lags))/dplyr::lag({{col}}, n = lags)
} else {
{{col}}-dplyr::lag({{col}}, n = lags)
}
}
#'
#' @param lags numeric list
#' @param percent boolean to determine if difference should be percent difference
#'
#' @return pre-filled function
#' @export
#'
#' @examples
#'
#' #none
make_diff_col = function(lags = c(1, 7), percent = F){
purrr::map(lags, ~purrr::partial(make_diff, lags = .x, percent = percent))
}
#' @param percent boolean to determine if difference should be percent difference
#'
#' @return
#' @export
#'
#' @examples
#'
#' data.frame(index = 1:10,
#' value1 = rnorm(10), value2 = rnorm(10)) %>%
#' mutate(auto_make_lag_col(col = value1, c(1, 3, 5)))
auto_make_diff_col = function(col, lags = c(1, 7), percent = F){
dplyr::across({{col}}, make_diff_col(lags = lags, percent = percent), .names = "{.col}_diff_{lags}")
}
#'
#' @param col a column to make lags of
#' @param lags numeric list
#' @param percent boolean to determine if difference should be percent difference
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_diff_col(col = value1))
#'
#' @param col a column to make lags of
#' @param lags numeric list
#' @param percent boolean to determine if difference should be percent difference
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_diff_col(col = value1, percent = T))
auto_make_diff_col = function(col, lags = c(1, 7), percent = F){
dplyr::across({{col}}, make_diff_col(lags = lags, percent = percent), .names = "{.col}_diff{ifelse(percent, p, '')}_{lags}")
}
#'
#' @param col a column to make lags of
#' @param lags numeric list
#' @param percent boolean to determine if difference should be percent difference
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_diff_col(col = value1, percent = T))
dplyr::across({{col}}, make_diff_col(lags = lags, percent = percent), .names = "{.col}_diff{ifelse(percent, 'p', '')}_{lags}")
auto_make_diff_col = function(col, lags = c(1, 7), percent = F){
dplyr::across({{col}}, make_diff_col(lags = lags, percent = percent), .names = "{.col}_diff{ifelse(percent, 'p', '')}_{lags}")
}
#'
#' @param col a column to make lags of
#' @param lags numeric list
#' @param percent boolean to determine if difference should be percent difference
#'
#' @return
#' @export
#'
#' @examples
#'
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_diff_col(col = value1, percent = T))
devtools::document()
devtools::install()
library(gauntlet)
library(gauntlet)
gauntlet::alert_me()
gauntlet::auto_make_diff_col()
#' Pre-filled lag function. This function should not be directly used, it is used inside of auto_make_lag_col function.
#'
#' @param lags numeric list
#'
#' @return pre-filled function
#' @export
#'
#' @examples
#'
#' #none
make_lag_col = function(lags = c(1, 7)){
purrr::map(lags, ~purrr::partial(dplyr::lag, n = .x))
}
devtools::document
devtools::document()
#'
#' Makes rolling mean column(s) from a dataframe column defined by the user using window sizes also defined by the user.
#'
#' @param col a column to make rolling means of
#' @param width integer input indicating size of sliding window used to caluclate mean
#'
#' @return dataframe with rolling mean column(s)S
#' @export
#'
#' @examples
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_rMean_col(col = value1))
library(tidyverse)
#'
#' Makes rolling mean column(s) from a dataframe column defined by the user using window sizes also defined by the user.
#'
#' @param col a column to make rolling means of
#' @param width integer input indicating size of sliding window used to caluclate mean
#'
#' @return dataframe with rolling mean column(s)S
#' @export
#'
#' @examples
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_rMean_col(col = value1))
auto_make_rMean_col = function(col, width = c(3, 7)){
dplyr::across({{col}}, make_rMean_col(width = width, equal = 2), .names = "{.col}_rMean_{width}")
}
#'
#' Makes rolling mean column(s) from a dataframe column defined by the user using window sizes also defined by the user.
#'
#' @param col a column to make rolling means of
#' @param width integer input indicating size of sliding window used to caluclate mean
#'
#' @return dataframe with rolling mean column(s)S
#' @export
#'
#' @examples
data.frame(index = 1:10,
value1 = rnorm(10), value2 = rnorm(10)) %>%
mutate(auto_make_rMean_col(col = value1, width = c(3, 7)))
devtools::document()
devtools::install()
devtools::document()
devtools::install()
gauntlet::auto_make_lag_col()
devtools::document()
devtools::install()
library(gauntlet)
library(gauntlet)
