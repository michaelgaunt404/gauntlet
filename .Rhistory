# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = 'count'
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
.[,.(count = sum(col)), by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = 'count'
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
.[,.(count = sum(data[[col]])), by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = 'count'
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(col)), by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = 'count'
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(col)), by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = count
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(col)), by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = count
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(col)), by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = count
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
# col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(.SD)), SDcols = col, by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = count
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
# col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(.SD)), .SDcols = col, by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = count
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
# col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(.SD)), .SDcols = col, by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = "count"
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
# col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(.SD)), .SDcols = col, by = grp_c]
#   .[,`:=`(percent = (count/sum(count)) %>%
#             { if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
#   { if (cntr_scl) (.) %>%
#       .[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
#     else .}
#
# if (is.null(prefix)){
#   tmp
# } else {
#   newname1 = str_glue("{prefix}_count")
#   newname2 = str_glue("{prefix}_percent")
#   rename(tmp, !!newname1 := count, !!newname2 := percent)
# }
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = "count"
) %>%
print()
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = "zcount"
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
# col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(.SD)), .SDcols = col, by = grp_c]
.[,`:=`(percent = (count/sum(count)) %>%
{ if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
{ if (cntr_scl) (.) %>%
.[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = "zcount"
) %>%
print()
count_percent_zscore_dt = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col, prefix = NULL, rnd = NULL, cntr_scl = FALSE){
# col  = deparse(substitute(col))
tmp = data %>%
.[,.(count = sum(.SD)), .SDcols = col, by = grp_c] %>%
.[,`:=`(percent = (count/sum(count)) %>%
{ if (!is.null(rnd)) round(., rnd) else .}), by = grp_p] %>%
{ if (cntr_scl) (.) %>%
.[,`:=`(zscore = as.vector(scale(count))), by = grp_z]
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = "zcount"
) %>%
print()
penguins %>%
mutate(count = 1
,zcount = 2) %>%
data.table() %>%
count_percent_zscore_dt(
grp_c = c("species", "year")
,grp_p = c("species")
,col = "count"
) %>%
print()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install()
devtools::document()
devtools::install()
str_remove_all(Sys.Date(), "[:punct:]") %>%
str_replace_all(" ", "_")
library(tidyverse)
str_remove_all(Sys.time(), "[:punct:]") %>%
str_replace_all(" ", "_")
str_remove_all(Sys.Date(), "[:punct:]") %>%
str_replace_all(" ", "_")
make_space(with = "//\", c = ".")
make_space(with = "//\", c = "\\.")
make_space(with = "//\\\", c = "\\.")
make_space(with = "/", c = "\\.")
#' @param with string character to repeat - default is a plus sign ('+')
#' @param n integer indicating number of times string character should be repeated
#' @param c string character collapse with input - default is an empty character ('')
#'
#' @return string of collapsed, repeated character
#' @export
#'
#' @examples
#'
#' make_space(with = "/", c = "\\.")
make_space = function(with = "+", n = 50, c = ""){
paste0(rep('+', 50),collapse=c) %>%
paste0("\n", .)
}
make_space(with = "/", c = "\\.")
#' @param with string character to repeat - default is a plus sign ('+')
#' @param n integer indicating number of times string character should be repeated
#' @param c string character collapse with input - default is an empty character ('')
#'
#' @return string of collapsed, repeated character
#' @export
#'
#' @examples
#'
#' make_space(with = "/", c = "\\.")
make_space = function(with = "+", n = 50, c = ""){
paste0(rep(with, 50),collapse=c) %>%
paste0("\n", .)
}
make_space(with = "/", c = "\\.")
make_space(with = "//", c = "\\.")
make_space(with = "//", c = "\\")
temp = data.frame(
highway = c("90 East", "405 Northbound", "101")
,count = c(100, 205, 92)
) %>%
mutate(percent = count/sum(count))
temp
temp = data.frame(
highway = c("90 East", "405 Northbound", "101")
,count = c(100, 205, 92)
) %>%
mutate(percent = round(/sum(count), 2))
temp = data.frame(
highway = c("90 East", "405 Northbound", "101")
,count = c(100, 205, 92)
) %>%
mutate(percent = round(sum(count), 2))
temp
#' Title
#'
#' @param msg
#'
#' @return
#' @export
#'
#' @examples
glue_collapse = function(msg){
str_glue(msg) %>% paste0(collapse = '\n')
}
str_glue("{temp$count} ({temp$percent}%) - {temp$highway}")
str_glue("{temp$count} ({temp$percent}%) - {temp$highway}") %>%
message()
str_glue("{temp$count} ({temp$percent}%) - {temp$highway}") %>%
glue_collapse() %>%
message()
"{temp$count} ({temp$percent}%) - {temp$highway}" %>%
glue_collapse() %>%
message()
"{temp$count} ({temp$percent}%) - {temp$highway}" %>%
glue_collapse() %>%
message()
temp = data.frame(
highway = c("90 East", "405 Northbound", "101")
,count = c(100, 205, 92)
) %>%
mutate(percent = round(count/sum(count), 2))
"{temp$count} ({temp$percent}%) - {temp$highway}" %>%
glue_collapse() %>%
message()
str_glue("{temp$count} ({temp$percent}%) - {temp$highway}") %>%
message()
library(gauntlet)
devtools::document()
devtools::document()
devtools::document()
devtools::install
devtools::install()
library(gauntlet)
library(gauntlet)
devtools::document()
devtools::install()
library(gauntlet)
devtools::document()
devtools::install()
#' Apply Min-Max normalization to a numeric vector.
#'
#' @param x a numeric vector. Works in tidyverse mututate function.
#' @param na.rm
#'
#' @return a normalized numeric vector.
#' @export
#'
#' @examples
mtcars %>%
mutate(hp_norm = normalize_min_max(hp))
library(gauntlet)
devtools::document()
devtools::install()
rescale_to = function(column, value){
#helps rescale column to specific max value
#general purpose function but mostly used to control line widths in leafelt
value/max(column)*column
}
devtools::document()
library(gauntlet)
devtools::install()
leaflet_default_tiles_index()
