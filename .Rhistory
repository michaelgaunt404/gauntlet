library(tidyverse)
test_data %>%
ts_mad(window = 7)
devtools::document()
devtools::install()
library(gauntlet)
ts_mad()
library(tidyverse)
test_data = data.frame(index = 1:53,
value = c(rnorm(25, 10, 3)
,rnorm(3, 100, 3)
,rnorm(25, 10, 3)))
test_data %>%
ts_mad(window = 7)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addMarkers() else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
library(tiyverse)
library(tidyverse)
mapview::breweries %>%
quick_leaflet(markers = T)
library(leaflet)
mapview::breweries %>%
quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers() else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
#'
#' @param markers boolean to indicate if markers should be used - default value is `false`
#' @param lines boolean to indicate if lines should be used - default value is `false`
#' @param polys boolean to indicate if polygons should be used - default value is `false`
#'
#' @return
#' @export
#'
#' @examples
#'mapview::breweries %>%
#'  quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers(color = "black", lwd = 1) else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
quick_leaflet
#' @param markers boolean to indicate if markers should be used - default value is `false`
#' @param lines boolean to indicate if lines should be used - default value is `false`
#' @param polys boolean to indicate if polygons should be used - default value is `false`
#'
#' @return
#' @export
#'
#' @examples
#'mapview::breweries %>%
#'  quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers(color = "black", lwd = 1) else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
mapview::breweries %>%
quick_leaflet(markers = T)
#' @param markers boolean to indicate if markers should be used - default value is `false`
#' @param lines boolean to indicate if lines should be used - default value is `false`
#' @param polys boolean to indicate if polygons should be used - default value is `false`
#'
#' @return
#' @export
#'
#' @examples
#'mapview::breweries %>%
#'  quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers(color = "black", lwd = 1) else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
#' @param markers boolean to indicate if markers should be used - default value is `false`
#' @param lines boolean to indicate if lines should be used - default value is `false`
#' @param polys boolean to indicate if polygons should be used - default value is `false`
#'
#' @return
#' @export
#'
#' @examples
#'mapview::breweries %>%
#'  quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers(color = "black", weight = 1) else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
#' @param markers boolean to indicate if markers should be used - default value is `false`
#' @param lines boolean to indicate if lines should be used - default value is `false`
#' @param polys boolean to indicate if polygons should be used - default value is `false`
#'
#' @return
#' @export
#'
#' @examples
#'mapview::breweries %>%
#'  quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers(color = "black", weight = 1, fillColor = "blue") else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
#' @param markers boolean to indicate if markers should be used - default value is `false`
#' @param lines boolean to indicate if lines should be used - default value is `false`
#' @param polys boolean to indicate if polygons should be used - default value is `false`
#'
#' @return
#' @export
#'
#' @examples
#'mapview::breweries %>%
#'  quick_leaflet(markers = T)
quick_leaflet = function(data, markers = F, lines = F, polys = F){
data %>%
leaflet() %>%
addTiles() %>%
{ if (markers) (.) %>% addCircleMarkers(color = "black", weight = 2, fillColor = "blue") else .} %>%
{ if (lines) (.) %>% addPolylines() else .} %>%
{ if (polys) (.) %>% addPolygons() else .}
}
mapview::breweries %>%
quick_leaflet(markers = T)
mapview::breweries
mapview::breweries %>%
quick_leaflet(markers = T)
make_honeycomb_counts = function(data, dim){
area_honeycomb_grid =
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(4326)
temp = st_join(area_honeycomb_grid, data) %>%
filter(!is.na(Ref)) %>%
count(grid_id)
return(temp)
}
mapview::breweries %>%
make_honeycomb_counts(2000)
library(sf)
mapview::breweries %>%
make_honeycomb_counts(2000)
mapview::breweries %>%
make_honeycomb_counts(10000)
data = mapview::breweries
dim = 10000
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE)
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON")
area_honeycomb_grid =
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(4326)
st_join(area_honeycomb_grid, data)
temp = st_join(area_honeycomb_grid, data) %>%
# filter(!is.na(Ref)) %>%
count(grid_id)
temp
temp %>%
quick_leaflet(polys = T)
temp %>%
mapview::mapview(zcol = "n")
temp %>%
mapview::mapview(zcol = "n") + mapview::mapview(data)
make_honeycomb_counts = function(data, dim){
area_honeycomb_grid =
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(4326)
temp = st_join(area_honeycomb_grid, data) %>%
# filter(!is.na(Ref)) %>%
count(grid_id)
return(temp)
}
mapview::breweries %>%
make_honeycomb_counts(100000) %>%
mapview::mapview(zcol = "n") + mapview::mapview(data)
data = mapview::breweries %>%
make_honeycomb_counts(50000) %>%
mapview::mapview(zcol = "n") + mapview::mapview(data)
data
area_honeycomb_grid
st_join(data, area_honeycomb_grid)
data = mapview::breweries
area_honeycomb_grid =
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(4326)
dim = 20000
area_honeycomb_grid =
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(4326)
st_join(data, area_honeycomb_grid)
temp = st_join(data, area_honeycomb_grid) %>%
# filter(!is.na(Ref)) %>%
count(grid_id)
temp %>%
mapview::mapview(zcol = "n") + mapview::mapview(data)
st_join(area_honeycomb_grid, data, st_within)
st_join(area_honeycomb_grid, data %>%
mutate(flag = 1), st_within)
st_join(area_honeycomb_grid, data %>%
mutate(flag = 1), st_within) %>%
mutate(flag = replace_na(flag, 0))
area_honeycomb_grid
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1), st_within) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag))
temp
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id")
area_honeycomb_grid_object %>%
mapview::mapview(zcol = "n")
area_honeycomb_grid_object
area_honeycomb_grid_object %>%
mapview::mapview(zcol = "count") + mapview::mapview(data)
area_honeycomb_grid_object
data = mapview::breweries
dim = 20000
area_honeycomb_grid =
data %>%
st_transform(2285) %>%
st_make_grid(c(dim, dim), what = "polygons", square = FALSE) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(4326)
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1), st_within) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag))
temp
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1), st_within) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop") %>%
arrange(desc(count))
temp
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1), st_within)
temp
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1))
temp
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop") %>%
arrange(desc(count))
source("~/051_projects/gauntlet/R/helpers_leaflet.R", echo=TRUE)
temp
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop") %>%
arrange(desc(count))
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id")
area_honeycomb_grid_object %>%
mapview::mapview(zcol = "count") + mapview::mapview(data)
area_honeycomb_grid_object
temp
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T)
area_honeycomb_grid_object
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T) %>%
arrange(desc(count))
area_honeycomb_grid_object
area_honeycomb_grid_object
area_honeycomb_grid_object %>%
mapview::mapview(zcol = "count")
area_honeycomb_grid_object %>%
mapview::mapview(zcol = "count") + mapview::mapview(data)
data
data = mapview::breweries
area_honeycomb_grid_object %>%
mapview::mapview(zcol = "count") + mapview::mapview(data)
make_honeycomb_counts = function(data, map_back_crs = 4326, honey_crs = 2285, honey_dim, honey_type = F){
area_honeycomb_grid =
data %>%
st_transform(honey_crs) %>%
st_make_grid(c(dim, dim), what = "polygons", square = honey_type) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(map_back_crs)
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop")
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T) %>%
arrange(desc(count))
return(area_honeycomb_grid_object)
}
make_honeycomb_counts = function(data, map_back_crs = 4326
,honey_crs = 2285, honey_dim = 10000, honey_type = F){
area_honeycomb_grid =
data %>%
st_transform(honey_crs) %>%
st_make_grid(c(dim, dim), what = "polygons", square = honey_type) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(map_back_crs)
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop")
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T) %>%
arrange(desc(count))
return(area_honeycomb_grid_object)
}
#' @param data an SF object
#' @param map_back_crs an integer indicating which crs for the aggregated counts to be returned in - default is `4326`
#' @param honey_crs an integer indicating which crs to use in aggregation, aggregation cannot be perfomed useing lat/long, must be ft or m - default is `2285`
#' @param honey_dim a integer (in honey_crs units) indicating size of honeycomb or square
#' @param honey_type a boolean indicating what type of honeycomb to use - honeycomb (`F`) or square (`T`)
#'
#' @return an SF object (multipolygon) with counts per honeycomb unit
#' @export
#'
#' @examples
make_honeycomb_counts = function(data, map_back_crs = 4326
,honey_crs = 2285, honey_dim = 10000, honey_type = F){
area_honeycomb_grid =
data %>%
st_transform(honey_crs) %>%
st_make_grid(c(dim, dim), what = "polygons", square = honey_type) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(map_back_crs)
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop")
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T) %>%
arrange(desc(count))
return(area_honeycomb_grid_object)
}
breweries91 %>%
make_honeycomb_counts(honey_type = T) %>%
mapview::mapview(zcol = "count")
#' @param data an SF object
#' @param map_back_crs an integer indicating which crs for the aggregated counts to be returned in - default is `4326`
#' @param honey_crs an integer indicating which crs to use in aggregation, aggregation cannot be perfomed useing lat/long, must be ft or m - default is `2285`
#' @param honey_dim a integer (in honey_crs units) indicating size of honeycomb or square
#' @param honey_type a boolean indicating what type of honeycomb to use - honeycomb (`F`) or square (`T`)
#'
#' @return an SF object (multipolygon) with counts per honeycomb unit
#' @export
#'
#' @examples
make_honeycomb_counts = function(data, map_back_crs = 4326
,honey_crs = 2285, honey_dim = 10000, honey_type = F){
area_honeycomb_grid =
data %>%
st_transform(honey_crs) %>%
st_make_grid(c(dim, dim), what = "polygons", square = honey_type) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(map_back_crs)
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop")
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T) %>%
arrange(desc(count))
return(area_honeycomb_grid_object)
}
breweries91 %>%
make_honeycomb_counts(honey_type = T)
honey_crs = 2285
data = breweries91
area_honeycomb_grid =
data %>%
st_transform(honey_crs) %>%
st_make_grid(c(dim, dim), what = "polygons", square = honey_type) %>%
st_sf() %>%
st_cast("MULTIPOLYGON") %>%
mutate(grid_id = row.names(.)) %>%
st_transform(map_back_crs)
temp = st_join(area_honeycomb_grid, data %>%
mutate(flag = 1)) %>%
mutate(flag = replace_na(flag, 0)) %>%
st_drop_geometry() %>%
group_by(grid_id) %>%
summarise(count = sum(flag), .groups = "drop")
area_honeycomb_grid_object = area_honeycomb_grid %>%
merge(temp, by = "grid_id", all = T) %>%
arrange(desc(count))
area_honeycomb_grid_object
mapview::mapview(make_honeycomb_counts)
mapview::mapview(area_honeycomb_grid_object)
breweries91
data = mapview::breweries %>%
make_honeycomb_counts(honey_type = T) %>%
mapview::mapview(zcol = "count") + mapview::mapview()
mapview::breweries %>%
make_honeycomb_counts(honey_type = T) %>%
mapview::mapview(zcol = "count")
mapview::breweries %>%
make_honeycomb_counts(honey_type = T) %>%
filter(count > 0) %>%
mapview::mapview(zcol = "count")
#' @param data an SF object
#' @param map_back_crs an integer indicating which crs for the aggregated counts to be returned in - default is `4326`
#' @param honey_crs an integer indicating which crs to use in aggregation, aggregation cannot be perfomed useing lat/long, must be ft or m - default is `2285`
#' @param honey_dim a integer (in honey_crs units) indicating size of honeycomb or square
#' @param honey_type a boolean indicating what type of honeycomb to use - honeycomb (`F`) or square (`T`)
#'
#' @return an SF object (multipolygon) with counts per honeycomb unit
#' @export
#'
#' @examples
mapview::breweries %>%
make_honeycomb_counts(honey_type = T) %>%
filter(count > 0) %>%
mapview::mapview(zcol = "count")
devtools::document()
devtools::document()
devtools::install()
