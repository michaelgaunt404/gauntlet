col = count, prefix = NULL,
rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
group_by(across({{grp_c}})) %>%
summarise(count = sum({{col}})) %>%
ungroup() %>%
group_by(across({{grp_p}})) %>%
mutate(percent = ({{col}}/sum({{col}})) %>%
{ if (!is.null(rnd)) round(., rnd) else .}
) %>%
ungroup() %>%
{ if (cntr_scl) (.) %>%
group_by(across({{grp_z}})) %>%
mutate(zscore = as.vector(scale({{col}})))
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
# ,col = "value"
)
#automates aggregating counts and percents for different groupings of data
count_percent_zscore = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col , prefix = NULL,
rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
group_by(across({{grp_c}})) %>%
summarise(count = sum({{col}})) %>%
ungroup() %>%
group_by(across({{grp_p}})) %>%
mutate(percent = ({{col}}/sum({{col}})) %>%
{ if (!is.null(rnd)) round(., rnd) else .}
) %>%
ungroup() %>%
{ if (cntr_scl) (.) %>%
group_by(across({{grp_z}})) %>%
mutate(zscore = as.vector(scale({{col}})))
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
,col = count
)
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
,col = value1
)
#automates aggregating counts and percents for different groupings of data
count_percent_zscore = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col , prefix = NULL,
rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
group_by(across({{grp_c}})) %>%
summarise(count = sum({{col}})) %>%
ungroup() %>%
group_by(across({{grp_p}})) %>%
mutate(percent = (count/sum(count)) %>%
{ if (!is.null(rnd)) round(., rnd) else .}
) %>%
ungroup() %>%
{ if (cntr_scl) (.) %>%
group_by(across({{grp_z}})) %>%
mutate(zscore = as.vector(scale(count)))
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
,col = value1
)
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
,col = count
)
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
,col = count
)
data1 %>%
count_percent_zscore(grp_c = c(group1)
,grp_p = c()
,col = count
)
str(c(1, 2))
str(list(1, 2))
#' @param grp_z a vector of columns to group zscore calculation operation with - do not quote columns
#' @param col a column to count or sum - do not quote column
#' @param prefix a string used to prefix calculated columns with - leave empty if you do not want a prefix
#' @param rnd integer indcating how many digits you want calculated columns to be rounded to - leave empty if you do not want rounding
#' @param cntr_scl (`TRUE`/`FALSE`) boolean to indicate if zscore should be calculated - default is `FALSE`
#'
#' @return a dataframe
#' @export
#'
#' @examples
count_percent_zscore = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col , prefix = NULL,
rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
group_by(across({{grp_c}})) %>%
summarise(count = sum({{col}})) %>%
ungroup() %>%
group_by(across({{grp_p}})) %>%
mutate(percent = (count/sum(count)) %>%
{ if (!is.null(rnd)) round(., rnd) else .}
) %>%
ungroup() %>%
{ if (cntr_scl) (.) %>%
group_by(across({{grp_z}})) %>%
mutate(zscore = as.vector(scale(count)))
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
#' @param grp_z a vector of columns to group zscore calculation operation with - do not quote columns
#' @param col a column to count or sum - do not quote column
#' @param prefix a string used to prefix calculated columns with - leave empty if you do not want a prefix
#' @param rnd integer indcating how many digits you want calculated columns to be rounded to - leave empty if you do not want rounding
#' @param cntr_scl (`TRUE`/`FALSE`) boolean to indicate if zscore should be calculated - default is `FALSE`
#'
#' @return a dataframe
#' @export
#'
#' @examples
temp_data = data.frame(group1 = c(rep("A", 4), rep("B", 4))
,order1 = c(1:4, 1:4)) %>%
mutate(value1 = 2*order1+rnorm(8, 5)) %>%
group_by(group1) %>%
mutate(value_corrected = crrct0(value1)) %>%
ungroup()
#' @param grp_z a vector of columns to group zscore calculation operation with - do not quote columns
#' @param col a column to count or sum - do not quote column
#' @param prefix a string used to prefix calculated columns with - leave empty if you do not want a prefix
#' @param rnd integer indcating how many digits you want calculated columns to be rounded to - leave empty if you do not want rounding
#' @param cntr_scl (`TRUE`/`FALSE`) boolean to indicate if zscore should be calculated - default is `FALSE`
#'
#' @return a dataframe
#' @export
#'
#' @examples
temp_data = data.frame(group1 = c(rep("A", 4), rep("B", 4))
,order1 = c(1:4, 1:4)) %>%
mutate(value1 = 2*order1+rnorm(8, 5)) %>%
group_by(group1) %>%
mutate(value_corrected = crrct0(value1)
,count1 = 1) %>%
ungroup()
temp_data
count_percent_zscore(data1, grp_c = c(group1), grp_p = c(), col = count)
#' @param grp_z a vector of columns to group zscore calculation operation with - do not quote columns
#' @param col a column to count or sum - do not quote column
#' @param prefix a string used to prefix calculated columns with - leave empty if you do not want a prefix
#' @param rnd integer indcating how many digits you want calculated columns to be rounded to - leave empty if you do not want rounding
#' @param cntr_scl (`TRUE`/`FALSE`) boolean to indicate if zscore should be calculated - default is `FALSE`
#'
#' @return a dataframe
#' @export
#'
#' @examples
temp_data = data.frame(group1 = c(rep("A", 4), rep("B", 4))
,order1 = c(1:4, 1:4)) %>%
mutate(value1 = 2*order1+rnorm(8, 5),count1 = 1)
count_percent_zscore(data1, grp_c = c(group1), grp_p = c(), col = count)
#' @param grp_z a vector of columns to group zscore calculation operation with - do not quote columns
#' @param col a column to count or sum - do not quote column
#' @param prefix a string used to prefix calculated columns with - leave empty if you do not want a prefix
#' @param rnd integer indcating how many digits you want calculated columns to be rounded to - leave empty if you do not want rounding
#' @param cntr_scl (`TRUE`/`FALSE`) boolean to indicate if zscore should be calculated - default is `FALSE`
#'
#' @return a dataframe
#' @export
#'
#' @examples
temp_data = data.frame(group = c(rep("A", 4), rep("B", 4))
,order = c(1:4, 1:4)) %>%
mutate(value = 2*order+rnorm(8, 5)
,count = 1)
count_percent_zscore(temp_data, grp_c = c(group), grp_p = c(), col = count)
count_percent_zscore(data1, grp_c = c(order1), grp_p = c(), col = value)
temp_data
count_percent_zscore(data1, grp_c = c(order), grp_p = c(), col = value)
count_percent_zscore(temp_data, grp_c = c(order), grp_p = c(), col = value)
#'
#' @examples
#'temp_data = data.frame(group = c(rep("A", 4), rep("B", 4))
#'                       ,order = c(1:4, 1:4)) %>%
#'  mutate(value = 2*order+rnorm(8, 5)
#'         ,count = 1)
#'
#'count_percent_zscore(temp_data, grp_c = c(group), grp_p = c(), col = count)
#'
#'count_percent_zscore(temp_data, grp_c = c(order), grp_p = c(), col = value)
count_percent_zscore = function(data, grp_c = ..., grp_p = ..., grp_z = ...,
col , prefix = NULL, rnd = NULL, cntr_scl = FALSE){
tmp = data %>%
group_by(across({{grp_c}})) %>%
summarise(count = sum({{col}})) %>%
ungroup() %>%
group_by(across({{grp_p}})) %>%
mutate(percent = (count/sum(count)) %>%
{ if (!is.null(rnd)) round(., rnd) else .}
) %>%
ungroup() %>%
{ if (cntr_scl) (.) %>%
group_by(across({{grp_z}})) %>%
mutate(zscore = as.vector(scale(count)))
else .}
if (is.null(prefix)){
tmp
} else {
newname1 = str_glue("{prefix}_count")
newname2 = str_glue("{prefix}_percent")
rename(tmp, !!newname1 := count, !!newname2 := percent)
}
}
devtools::document()
devtools::install()
devtools::document()
devtools::document()
devtools::install()
devtools::document()
devtools::install()
library(gauntlet)
library(tidyverse)
temp_data = data.frame(group = c(rep("A", 4), rep("B", 4))
,order = c(1:4, 1:4)) %>%
mutate(value = 2*order+rnorm(8, 5)
,count = 1)
count_percent_zscore(temp_data, grp_c = c(group), grp_p = c(), col = count)
count_percent_zscore(temp_data, grp_c = c(order), grp_p = c(), col = value)
Sys.Date()
library(tidyverse)
plot(mtcars)
plot(mtcars)
plot(mtcars[,c1:4])
plot(mtcars[,c(1:4)])
plot(mtcars[,c(1:3)])
plot(mtcars[,c(4:6)])
plot(mtcars[,c(4:6)])
plot(mtcars[,c(1:3)])
devtools::document()
devtools::install()
gauntlet
gauntlet::make_new_rmd(folder = "r", file_name = "test.Rmd")
devtools::document()
devtools::install()
markdown_folder = "analysis/"
markdown_name = 'test'
markdown_path_rmd = stringr::str_glue("{markdown_folder}{markdown_name}.Rmd") %>%
here()
library(tidyverse)
stringr::str_glue("{markdown_folder}{markdown_name}.Rmd") %>%
here()
library(here)
stringr::str_glue("{markdown_folder}{markdown_name}.Rmd") %>%
here()
markdown_folder = "analysis"
markdown_path_rmd = stringr::str_glue("{markdown_folder}/{markdown_name}.Rmd") %>%
here()
markdown_path_rmd
dashboard_name = "dashboard"
dashboard_name = 'test'
stringr::str_glue("{dashboard_folder}/{dashboard_name}.Rmd")
dashboard_name = "dashboard"
stringr::str_glue("{dashboard_folder}/{dashboard_name}.Rmd")
dashboard_folder = "dashboard"
stringr::str_glue("{dashboard_folder}/{dashboard_name}.Rmd")
stringr::str_glue("{dashboard_folder}{dashboard_name}.html")
devtools::document()
devtools::document()
devtools::install()
st_true_midpoint = function(sf_object){
#gets the true midpoint along a curved line
temp = sf_object %>%
mutate(merge_id = row_number())
sf_object_linestring = temp %>%
st_transform(2781) %>%
st_cast("LINESTRING") %>%
mutate(linestring_id = row_number()) %>%
select(merge_id, linestring_id)
coords_extract = sf_object_linestring %>%
st_line_sample(n = 5) %>%
st_transform(4326) %>%
st_coordinates() %>%
data.frame() %>%
merge(sf_object_linestring %>%
st_drop_geometry(),
by.x = "L1", by.y = "linestring_id") %>%
group_by(merge_id) %>%
mutate(n = ceiling(n()/2),
index = row_number()) %>%
filter(n == index) %>%
ungroup() %>%
select(X, Y, merge_id)
temp %>%
st_drop_geometry() %>%
merge(coords_extract,
by = "merge_id") %>%
st_as_sf(coords = c("X", "Y"), crs = 4326)
}
library(leaflet)
leaflet() %>% leaflet_default_tiles
#' Default tiles for a leaflet map.
#'
#' @param object a blank leaflet object
#'
#' @return a leaflet object
#' @export
#'
#' @examples
#' leaflet() %>%
#'   leaflet_default_tiles()
leaflet_default_tiles = function(object){
object %>%
addTiles(group = "OSM (default)") %>%
addProviderTiles(providers$Esri, group = "Esri") %>%
addProviderTiles(providers$CartoDB, group = "CartoDB")
}
leaflet() %>% leaflet_default_tiles
lealfet() %>%
addProviderTiles(providers$Esri.WorldStreetMap)
leaflet() %>%
addProviderTiles(providers$Esri.WorldStreetMap)
leaflet() %>%
addProviderTiles(providers$Esri.NatGeoWorldMap)
leaflet() %>%
addProviderTiles(providers$Esri.WorldTopoMap)
leaflet() %>%
addProviderTiles(providers$Esri.WorldImagery)
devtools::build()
devtools::install()
dataframe(group = c(rep(1, 4), rep(2, 3)))
data.frame(group = c(rep(1, 4), rep(2, 3)))
data.frame(group = c(rep(1, 4), rep(2, 3))
,days = c(seq(1, 4, 1), seq(1, 3, 1)))
runif(4, 2, 8)
round(runif(4, 2, 8), 0)
data.frame(group = c(rep(1, 4), rep(2, 3))
,days = c(seq(1, 4, 1), seq(1, 3, 1))
,count = c(round(runif(4, 2, 8), 0), round(runif(3, 1, 4), 0)))
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(seq(1, 4, 1)
,seq(1, 3, 1))
,count = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0)))
df %>%
group_by(group) %>%
nes() %>%
mutate(map(data, group_wtd_quantiles(.x, value = "days", weight = "count")))
library(tidyverse)
df %>%
group_by(group) %>%
nes() %>%
mutate(map(data, group_wtd_quantiles(.x, value = "days", weight = "count")))
df %>%
group_by(group) %>%
nest() %>%
mutate(map(data, group_wtd_quantiles(.x, value = "days", weight = "count")))
#' @param df a dataframe of data
#' @param value string of column that qunatiles will be calculated for
#' @param weight string of column that will be used to calculate quantiles with
#' @param quantiles vector of quantiles that should be returned - default is `c(0, .25, .5, .75, 1)` quantiles
#'
#' @return
#' @export
#'
#' @examples
#'
group_wtd_quantiles = function(df, value, weight = "count", quantiles = c(0, .25, .5, .75, 1)){
#this function creates creates qauntiles from data that has been pre-aggregated
map(quantiles, ~DescTools::Quantile(df[[value]], df[[weight]], .x, na.rm = T)) %>%
reduce(bind_cols) %>%
set_names(map_chr(quantiles, ~paste0(value, "_", .x*100, "%")))
}
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(seq(1, 4, 1)
,seq(1, 3, 1))
,count = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0)))
df %>%
group_by(group) %>%
nest() %>%
mutate(map(data, group_wtd_quantiles(.x, value = "days", weight = "count")))
df %>%
group_by(group) %>%
nest() %>%
mutate(map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count")))
df %>%
group_by(group) %>%
nest() %>%
mutate(map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(mean, qauntiles)) %>%
select(!data)
df %>%
group_by(group) %>%
nest() %>%
mutate(map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(qauntiles)) %>%
select(!data)
df %>%
group_by(group) %>%
nest() %>%
mutate(qauntiles = map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(qauntiles)) %>%
select(!data)
df
df %>%
group_by(group) %>%
nest() %>%
mutate(qauntiles = map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(qauntiles)) %>%
select(!data)
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(seq(1, 4, 1)
,seq(1, 3, 1))
,count = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0)))
df
df %>%
group_by(group) %>%
nest() %>%
mutate(qauntiles = map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(qauntiles)) %>%
select(!data)
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0))
,count = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0)))
df
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0))
,count = c(round(runif(4, 0, 20), 0)
,round(runif(3, 0, 2), 0)))
df %>%
group_by(group) %>%
nest() %>%
mutate(qauntiles = map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(qauntiles)) %>%
select(!data)
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(round(runif(4, 2, 8), 0)
,round(runif(3, 1, 4), 0))
,count = c(round(runif(4, 0, 20), 0)
,round(runif(3, 0, 2), 0)))
df
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(round(runif(4, 0, 20), 0)
,round(runif(3, 0, 20), 0))
,count = c(round(runif(4, 0, 20), 0)
,round(runif(3, 0, 20), 0)))
df
df = data.frame(group = c(rep(1, 4)
,rep(2, 3))
,days = c(round(runif(4, 0, 20), 0)
,round(runif(3, 0, 20), 0))
,count = c(round(runif(4, 0, 5), 0)
,round(runif(3, 0, 5), 0)))
df
df %>%
group_by(group) %>%
nest() %>%
mutate(qauntiles = map(data, ~group_wtd_quantiles(.x, value = "days", weight = "count"))) %>%
unnest(cols = c(qauntiles)) %>%
select(!data)
rep(df$days, df$count)
rep(df$days[1:4], df$count[1:4])
rep(df$days[1:4], df$count[1:4]) %>%  summary()
devtools::build()
devtools::install()
devtools::build()
devtools::document()
devtools::install()
devtools::install()
